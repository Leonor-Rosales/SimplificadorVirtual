import re

def contar_variables(expr):
    # Solo letras may√∫sculas como variables
    return len(set(re.findall(r"[A-Z]", expr)))


def simplificar_expresion(expr):
    pasos = []

    # üîπ Paso 0: validar n√∫mero de variables
    if contar_variables(expr) > 5:
        pasos.append({
            "ley": "Restricci√≥n del programa",
            "resultado": "‚ö†Ô∏è Solo puedes simplificar hasta 5 variables. Para m√°s necesitas una suscripci√≥n."
        })
        return pasos

    # üîπ Mostrar la funci√≥n inicial
    pasos.append({"ley": "Funci√≥n ingresada", "resultado": expr})

    # --- LEYES B√ÅSICAS DEL √ÅLGEBRA BOOLEANA ---
    reglas = [
        # Identidad
        (r"\+0", "", "Ley de Identidad (A + 0 = A)"),
        (r"0\+", "", "Ley de Identidad (0 + A = A)"),
        (r"‚ãÖ1", "", "Ley de Identidad (A‚ãÖ1 = A)"),
        (r"1‚ãÖ", "", "Ley de Identidad (1‚ãÖA = A)"),

        # Anulaci√≥n
        (r"[A-Z]‚ãÖ0", "0", "Ley de Anulaci√≥n (A‚ãÖ0 = 0)"),
        (r"0‚ãÖ[A-Z]", "0", "Ley de Anulaci√≥n (0‚ãÖA = 0)"),
        (r"[A-Z]\+1", "1", "Ley de Anulaci√≥n (A + 1 = 1)"),
        (r"1\+[A-Z]", "1", "Ley de Anulaci√≥n (1 + A = 1)"),

        # Idempotencia
        (r"([A-Z])\+\1", r"\1", "Ley de Idempotencia (A + A = A)"),
        (r"([A-Z])‚ãÖ\1", r"\1", "Ley de Idempotencia (A‚ãÖA = A)"),

        # Complemento
        (r"([A-Z])\+(\1‚Ä≤)", "1", "Ley del Complemento (A + A‚Ä≤ = 1)"),
        (r"([A-Z])‚ãÖ(\1‚Ä≤)", "0", "Ley del Complemento (A‚ãÖA‚Ä≤ = 0)"),

        # Involuci√≥n
        (r"([A-Z])‚Ä≤‚Ä≤", r"\1", "Ley de la Involuci√≥n ((A‚Ä≤)‚Ä≤ = A)"),

        # Absorci√≥n
        (r"([A-Z])\+\1‚ãÖ([A-Z])", r"\1", "Ley de Absorci√≥n (A + A‚ãÖB = A)"),
        (r"([A-Z])\+([A-Z])‚ãÖ\1", r"\1", "Ley de Absorci√≥n (A + B‚ãÖA = A)"),
        (r"([A-Z])‚ãÖ(\1\+[A-Z])", r"\1", "Ley de Absorci√≥n (A‚ãÖ(A + B) = A)"),

        # De Morgan
        (r"\(([^()]*)\+([^()]*)\)‚Ä≤", r"\1‚Ä≤‚ãÖ\2‚Ä≤", "Ley de De Morgan ((A+B)‚Ä≤ = A‚Ä≤‚ãÖB‚Ä≤)"),
        (r"\(([^()]*)‚ãÖ([^()]*)\)‚Ä≤", r"\1‚Ä≤+\2‚Ä≤", "Ley de De Morgan ((A‚ãÖB)‚Ä≤ = A‚Ä≤+B‚Ä≤)"),
    ]

    # üîπ Aplicar reglas iterativamente
    cambiado = True
    while cambiado:
        cambiado = False
        for patron, reemplazo, nombre in reglas:
            nueva = re.sub(patron, reemplazo, expr)
            if nueva != expr:
                pasos.append({"ley": nombre, "resultado": nueva})
                expr = nueva
                cambiado = True
                break  # volvemos a empezar desde arriba

    # üîπ Resultado final
    pasos.append({"ley": "Resultado final", "resultado": expr})

    return pasos
